######################################################################
# Defines
######################################################################
BUILD_DATE=`date +"%Y%m%d"`

TINDERBOX_HOME=${HOME}/src/tinderbox
TINDERBOX_BUILD_DIR=${TINDERBOX_HOME}/build
TINDERBOX_SNAPSHOTS_DIR=${TINDERBOX_HOME}/snapshots
TINDERBOX_BIN_DIR=${TINDERBOX_SNAPSHOTS_DIR}/${BUILD_DATE}

WORKRAVE_CVS_DIR=${TINDERBOX_BUILD_DIR}/workrave-cvs
WORKRAVE_WIN32_DIR=${TINDERBOX_BUILD_DIR}/workrave-win32
WORKRAVE_WIN32_DEBUG_DIR=${TINDERBOX_BUILD_DIR}/workrave-win32-debug
WORKRAVE_SOURCE_DIR=${TINDERBOX_BUILD_DIR}/workrave-source
WORKRAVE_DEB_DIR=${TINDERBOX_BUILD_DIR}/workrave-deb/build

WIN32_MAKERUNTIME=${HOME}/bin/make-runtime.sh
WIN32_MINGW_ENV=${HOME}/bin/mingw32
WIN32_ISCC=${HOME}/.wine/fake_windows/Program Files/Inno Setup 4/ISCC.exe
#WIN32_NMAKE=wineconsole ${HOME}/.wine/fake_windows/Program\ Files/Microsoft\ Visual\ Studio/VC98/Bin/NMAKE.EXE
WIN32_NMAKE=wineconsole ${HOME}/.wine/fake_windows/Program\ Files/Microsoft\ Visual\ C++\ Toolkit\ 2003/bin/nmake.exe


WORKRAVE_VERSION=`cat ${WORKRAVE_CVS_DIR}/configure.ac | grep AM_INIT_AUTOMAKE | cut -d ','  -f2 | cut -d' ' -f2 | cut -d')' -f1`
WORKRAVE_PREVERSION=`cat ${WORKRAVE_CVS_DIR}/configure.ac | grep AM_INIT_AUTOMAKE | perl -ne ' $$_ =~ /.*([0-9]+).([0-9]+).([0-9]+)/ ; printf "%d.%d.%d.99", $$1, $$2, ($$3 - 1) '`

CVS_FLAGS = -Q -z3 -d:ext:miss-workrave@workrave.cvs.sourceforge.net:/cvsroot/workrave

CONF_FLAGS = --quiet

######################################################################
# Miscellaneous
######################################################################

usage:
	echo Usage: "make all" to make all files from scratch

all: clean cvs-checkout workrave-win32-all workrave-source workrave-deb upload-purge upload

clean:
	-chmod -R u+w ${TINDERBOX_BUILD_DIR}
	-rm -rf ${TINDERBOX_BUILD_DIR}


init: 
	mkdir -p ${TINDERBOX_BUILD_DIR}
	mkdir -p ${TINDERBOX_BIN_DIR}



######################################################################
# CVS
######################################################################

cvs-checkout: init 
	-mkdir -p `dirname ${WORKRAVE_CVS_DIR}`
	( cd `dirname ${WORKRAVE_CVS_DIR}`; CVS_RSH=ssh cvs ${CVS_FLAGS} checkout -P -d `basename ${WORKRAVE_CVS_DIR}` workrave )

cvs-update:
	( cd ${WORKRAVE_CVS_DIR}; cvs update )


copy-cvs-dir = -rm -rf ${1}; \
	mkdir -p ${1}; \
	( cd ${WORKRAVE_CVS_DIR}; tar --exclude=CVS -cf - . ) | ( cd ${1}; tar xf - )


######################################################################
# Windows
######################################################################

workrave-win32-dir=\
	$(call copy-cvs-dir,${1}); \
	( cd ${1}/frontend/gtkmm/win32/setup/; \
	  ${WIN32_MAKERUNTIME} ${WORKRAVE_CVS_DIR}; \
	  tar xzf runtime-wimp.tar.gz; \
	  mv runtime-wimp/lib/gtk-2.0/2.2.0 runtime-wimp/lib/gtk-2.0/2.4.0 )

workrave-win32-build=\
	( . ${HOME}/bin/vcvars32.sh; \
          cd ${1}/common/win32/harpoon/src; \
	  ${WIN32_NMAKE} /f harpoon.mak CFG="harpoon - Win32 Release"; \
          cd ${1}/frontend/win32/applet/src; \
          ${WIN32_NMAKE} /f Applet.mak CFG="Applet - Win32 Release" ); \
	( cd ${1}; \
	  . ${WIN32_MINGW_ENV}; \
	  ./autogencross.sh ${CONF_FLAGS} ${2} && make WINDRES=$$WINDRES ); \
	nm -nosC ${1}/frontend/gtkmm/src/workrave.exe >${1}/frontend/gtkmm/src/workrave.sym;

workrave-win32-strip=\
	strip ${1}/frontend/gtkmm/src/workrave.exe

workrave-win32-setup=\
	( cd ${1}/frontend/gtkmm/win32/setup/; \
	  wine "${WIN32_ISCC}" setup.iss ); \
	mv ${1}/frontend/gtkmm/win32/setup/Output/setup.exe ${TINDERBOX_BIN_DIR}/workrave-win32-${BUILD_DATE}-${2}.exe; \
	gzip -c ${1}/frontend/gtkmm/src/workrave.sym >${TINDERBOX_BIN_DIR}/workrave-win32-${BUILD_DATE}-${2}.sym.gz


workrave-win32-dir: init
	$(call workrave-win32-dir,${WORKRAVE_WIN32_DIR})

workrave-win32-build: workrave-win32-dir
	$(call workrave-win32-build,${WORKRAVE_WIN32_DIR},--disable-debug)
	$(call workrave-win32-strip,${WORKRAVE_WIN32_DIR})

workrave-win32-setup: init workrave-win32-build
	$(call workrave-win32-setup,${WORKRAVE_WIN32_DIR},installer)


workrave-win32-debug-dir: init
	$(call workrave-win32-dir,${WORKRAVE_WIN32_DEBUG_DIR})

workrave-win32-debug-build: workrave-win32-debug-dir
	$(call workrave-win32-build,${WORKRAVE_WIN32_DEBUG_DIR},--enable-debug)
	( cd ${WORKRAVE_WIN32_DEBUG_DIR}/frontend/gtkmm/src; \
	  zip ${TINDERBOX_BIN_DIR}/workrave-win32-${BUILD_DATE}-debug.zip workrave.exe )


workrave-win32-all: \
		workrave-win32-debug-build \
		workrave-win32-setup


######################################################################
# Source
######################################################################

workrave-source: init
	$(call copy-cvs-dir,${WORKRAVE_SOURCE_DIR})
	( cd ${WORKRAVE_SOURCE_DIR}; \
	  ./autogen.sh --disable-gnome \
	  && make dist \
	  && mv ${WORKRAVE_SOURCE_DIR}/workrave-${WORKRAVE_VERSION}.tar.gz ${TINDERBOX_BIN_DIR}/workrave-src-${BUILD_DATE}.tar.gz )


######################################################################
# Debian
######################################################################

workrave-deb: init
	$(call copy-cvs-dir,${WORKRAVE_DEB_DIR})
	chmod u+x ${WORKRAVE_DEB_DIR}/debian/rules
	( cd ${WORKRAVE_DEB_DIR}; \
	  dch --ignore-dirname -v ${WORKRAVE_VERSION}+cvs${BUILD_DATE}-1 "Nighly snapshot"; \
	  ./autogen.sh \
          && dpkg-buildpackage -rfakeroot )
	mv ${WORKRAVE_DEB_DIR}/../workrave_*_i386.deb ${TINDERBOX_BIN_DIR}/

## workrave-${BUILD_DATE}_i386.deb

######################################################################
# Upload
######################################################################
upload-purge:
	for i in `find ${TINDERBOX_SNAPSHOTS_DIR} -type d -mtime +5 -print`; \
	do \
		echo Purging old snapshot: $$i; \
		rm -rf $$i; \
	done

upload:
	sitecopy --update snapshots
