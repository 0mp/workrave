Compiling Workrave on Windows (Draft)
*************************************

Compiling Workrave on Windows is a real crime. For those who are brave
enough, here are some hints from the top of my memory.

Note: The developers no longer compile workrave this way. Workrave is
now cross-compiled on Linux.

Step 1. Install Cygwin
======================

Install Cygwin. I'm not quite sure what packages you need, but you
should be safe if you install at least the following packages:

      - autoconf-devel-2.57-1
      - automake-1.7.1-1
      - automake-devel-1.7.2-1
      - base-files-1.1-1
      - base-passwd-1.0-1
      - bash-2.05b-8
      - cygutils-1.1.3-1
      - cygwin-1.3.20-1
      - diffutils-2.8.1-1
      - file-3.39-1
      - findutils-4.1.7-4
      - gzip-1.3.3-4
      - less-378-1
      - libtool-devel-20030103-1
      - m4-1.4-1
      - make-3.79.1-7
      - patch-2.5.8-3
      - perl-5.6.1-2
      - pkgconfig-0.14.0-1
      - sed-4.0.5-1
      - sh-utils-2.0.15-3
      - tar-1.13.25-1


Cygwin is available from http://www.cygwin.com


Step 2. Install MinGW
=====================

Install the MinGW with gcc 3.2. The following packages are used for
developement:

      - MinGW-2.0.0-3.exe
      - binutils-2.13.90-20021006-2.tar.gz
      - gcc-3.2-core-20020817-1.tar.gz
      - mingw-runtime-2.3.tar.gz
      - mingw-utils-0.2.tar.gz
      - w32api-2.1.tar.gz

MinGW is available from http://www.mingw.org


Step 3. Install Gtk+/Win32
==========================

Install gtk+/win32 and all dependencies. The pkg-config files expect
gtk+/win32 to be installed in directory "/target".

The following files are used for developement:

      - atk-1.0.3-20020821.zip
      - atk-dev-1.0.3-20020821.zip
      - freetype-2.1.2-1-lib.zip
      - freetype-2.1.2-bin.zip
      - gettext-dev-0.10.40-20020904.zip
      - glib-2.2.0-20030112.zip
      - glib-dev-2.2.0-20030112.zip
      - gtk+-2.2.0-20030119.zip
      - gtk+-dev-2.2.0-20030119.zip
      - jpeg-6b-1-bin.zip
      - jpeg-6b-1-lib.zip
      - libiconv-1.8-w32-1.bin.zip
      - libintl-0.10.40-tml-20020904.zip
      - libpng-1.2.4-1-bin.zip
      - libpng-1.2.4-1-lib.zip
      - pango-1.0.5-20021201.zip
      - pango-dev-1.0.5-20021201.zip
      - zlib-1.1.4-bin.zip
      - zlib-1.1.4-lib.zip

Gtk+/Win32 is available from http://gimp.org/~tml/gimp/win32/


Step 4. Unite Cygwin and MinGW
==============================

Unfortunately, the combination of Cygwin and MinGW causes some
problems:

1) Cygwin uses "/cygdrive/c/" whereas MinGW only supports "c:/".
   Things will go horribly wrong if configure, run by Cygwin's bash,
   puts "/cygdrive/c" in the generated Makefiles. MinGW's gcc chokes
   on things like "-I/cygdrive/c/include"

   You can solve this by putting the following line in your .bashrc:

   export BASH_ENV="~/.bash_mingw"

   The ~/.bash_mingw file should contain the following 2 lines:

   enable -n pwd
   alias pwd='cygpath -m `\pwd`/'

2) Gcc has some hardcoded directories in its search paths. Gcc always
   looks for header files in /usr/include and for libraries in
   /usr/lib. This causes libtool (run by Cygwin's bash) to find
   Cygwin's libraries and header files instead of MinGW's files...

   Well, there is no easy solution (The openldap website has a
   solution for this problem). Just make sure that configure and
   libtool don't find any Cygwin libraries (by deinstalling them...)

3) In Cygwin, the /target directory is actually, c:/cygwin/target
   (assuming cygwin is installed in c:/cygwin). In MinGW, /target is
   c:/target. To make sure that both Cygwin and MinGW use the same
   /target and /local directories, you have to put symbolic links in
   Cygwin root (c:/cygwin) to c:/

   ln -s /cygdrive/c/target /target
   ln -s /cygdrive/c/local /local

   The /target directory is used to install packages that can be
   downloaded as binaries. /local is used for software that you have
   to compile youself.
   
You can put the following function in your .bashrc to switch to MinGW
mode. This function also sets some environment variables.

function mingw() {
 if test -z "$old_PS1"; then
     old_PS1="$PS1"
     old_PATH="$PATH"
     PS1='\[\033[33m\w\033[0m\]
 MinGW> '
     export CFLAGS="-I/local/include -I/target/include"
     export CXXFLAGS="-I/local/include -I/target/include"
     export CPPFLAGS="-I/local/include -I/target/include"
     export LDFLAGS="-L/local/lib -L/target/lib"
     export CC='gcc -mms-bitfields -O3'
     export CXX='c++ -mms-bitfields -O3'
     export MACHTYPE="i686-pc-mingw32"
     export PATH="/local/bin:/local/lib:/target/bin:/target/lib:/mingw/bin:/mingw/lib:$PATH"
     export BASH_ENV="~/.bash_mingw"
     export PKG_CONFIG_PATH="/mingw/lib/pkgconfig:/target/lib/pkgconfig:/local/lib/pkgconfig"
     enable -n pwd
     alias pwd='cygpath -m `\pwd`/'
 fi
 }


Step 5. Compile Gtkmm
----------------------

Workrave requires gtkmm 2.0 or 2.2.

The following autogen.sh script can be used to configure gtkmm:

----------------------------------------------------------------------
#!/bin/sh

export CONFIG_SHELL=/bin/bash

srcdir=`dirname $0`
test -z "$srcdir" && srcdir=.

echo "Adding libtools."
libtoolize --automake --copy --force

echo "Building macros."
aclocal -I scripts  $ACLOCAL_FLAGS

#echo "Building config header."
autoheader

echo "Building makefiles."
automake --add-missing -f --copy

echo "Building configure."
autoconf

rm -f config.cache

bash ./configure --build=i686-pc-mingw32  --host=i686-pc-mingw32 --enable-maintainer-mode --enable-shared --disable-static --prefix=/local "$@"
----------------------------------------------------------------------

Run this autogen script, run make and make install.


Step 6. Compile gnet
====================

Workrave requires gnet >= 1.1.7. Apply the following patch and run
make -f makefile.mingw in the src directory. Install gnet in /local

----------------------------------------------------------------------
--- gnet-1.1.7-vanilla/src/tcp.c	2002-09-26 18:59:00.000000000 +0100
+++ gnet-1.1.7/src/tcp.c	2002-10-06 23:21:48.000000000 +0100
@@ -542,7 +542,7 @@
 
   state->connect_watch = 
     g_io_add_watch(gnet_private_iochannel_new(s->sockfd),
-		   G_IO_IN | G_IO_ERR,
+		   G_IO_IN | G_IO_OUT | G_IO_ERR,
 		   gnet_tcp_socket_new_async_cb, 
 		   state);
 
diff -ur gnet-1.1.7-vanilla/src/makefile.mingw gnet-1.1.7/src/makefile.mingw
--- gnet-1.1.7-vanilla/src/makefile.mingw	2002-09-16 15:19:51.000000000 +0100
+++ gnet-1.1.7/src/makefile.mingw	2002-10-06 23:22:32.000000000 +0100
@@ -1,7 +1,7 @@
 CC = gcc
-FLAGS = -g -Wall -mno-cygwin -mcpu=pentium -DGNET_EXPERIMENTAL=1
-INCLUDE = -I../glib -I. -L../glib -L.
-LIBS = -lglib-2.0-0 -lws2_32
+FLAGS = -O2 -g -Wall  -fnative-struct -mno-cygwin -mcpu=pentium -DGNET_EXPERIMENTAL=1
+INCLUDE = -I/target/include/glib-2.0 -I/target/lib/glib-2.0/include -I. -I.. -L/target/lib
+LIBS = -lglib-2.0-0 -lintl -liconv -lws2_32
 OFILES = udp.o tcp.o iochannel.o inetaddr.o mcast.o gnet.o gnet-private.o sha.o md5.o url.o pack.o conn.o server.o socks.o socks-private.o
 
 all:
@@ -20,4 +20,5 @@
 	$(CC) $(FLAGS) $(INCLUDE) -c server.c
 	$(CC) $(FLAGS) $(INCLUDE) -c socks.c
 	$(CC) $(FLAGS) $(INCLUDE) -c socks-private.c
-	dllwrap $(INCLUDE) --export-all --output-def gnet.def --implib libgnet-1.1.a -o gnet-1.1.dll $(OFILES) $(LIBS)
+	${CC} ${FLAGS} ${INCLUDE} -shared -o gnet-1.1.dll -Wl,--export-all-symbols -Wl,--out-implib,libgnet-1.1.a  $(OFILES) $(LIBS)
----------------------------------------------------------------------


Step 7. Install intltool
========================

Install intltool in /local. intltool is only required to build
workrave.


Step 8. Compile harpoon.dll
===========================

Harpoon is part of workrave and has to the compiled with Microsoft
Visual Studio 6. Open workrave/arch/win32/harpoon/harpoon.dsp and
compile the Release version.


Step 9. Compile Workrave
========================

Run ./autogenwin32.sh in the workrave root. 


Step 10. Enjoy
==============
