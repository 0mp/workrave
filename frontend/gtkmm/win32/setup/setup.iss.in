; setup.iss --- Inno setup file
; (Important: *MUST* be DOS encoded)
;
; Copyright (C) 2002 - 2011 Raymond Penners <raymond@dotsphinx.com>
; Copyright (C) 2010 - 2011 Rob Caelers <robc@krandor.nl>
; All rights reserved.
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.
;

[Setup]
AppName=Workrave
AppVerName=Workrave @VERSION@
AppPublisher=Rob Caelers & Raymond Penners
AppPublisherURL=http://www.workrave.org
AppSupportURL=http://www.workrave.org
AppUpdatesURL=http://www.workrave.org
DefaultDirName={pf}\Workrave
DefaultGroupName=Workrave
LicenseFile=..\..\..\..\COPYING
;AppMutex=WorkraveMutex
WizardImageFile=WizModernImage.bmp
WizardSmallImageFile=WizModernSmall.bmp
PrivilegesRequired=none

; uncomment the following line if you want your installation to run on NT 3.51 too.
; MinVersion=4,3.51

[Types]
Name: "full"; Description: "Full installation"
Name: "compact"; Description: "Compact installation (excludes DBus runtime)"

[Components]
Name: "main"; Description: "Main Files"; Types: full compact; Flags: fixed
Name: "dbus"; Description: "D-BUS Runtime Environment"; Types: full

[Tasks]
Name: "desktopicon"; Description: "Create a &desktop icon"; GroupDescription: "Additional tasks:"; MinVersion: 4,4
Name: "startupmenu"; Description: "Start Workrave when Windows starts"; GroupDescription: "Additional tasks:"; MinVersion: 4,4

[Files]
Source: "..\..\..\..\common\win32\harpoon\src\Release\harpoon.dll"; DestDir: "{app}\lib"; Flags: ignoreversion recursesubdirs restartreplace uninsrestartdelete;
Source: "..\..\..\..\common\win32\harpoon\src\Release\harpoon64.dll"; DestDir: "{app}\lib"; Check: IsWin64; Flags: ignoreversion recursesubdirs restartreplace uninsrestartdelete;
Source: "..\..\..\..\common\win32\harpoonHelper\src\Release\harpoonHelper.exe"; DestDir: "{app}\lib"; DestName: "harpoonHelper.exe"; Check: IsWin64; Flags: ignoreversion recursesubdirs restartreplace uninsrestartdelete;
Source: "..\..\..\applets\win32\src\Release\workrave-applet.dll"; DestDir: "{app}\lib"; Check: (not IsWin64); Flags: ignoreversion restartreplace uninsrestartdelete regserver 32bit;
Source: "..\..\..\applets\win32\src\Release\workrave-applet64.dll"; DestDir: "{app}\lib"; Check: IsWin64; Flags: ignoreversion restartreplace uninsrestartdelete regserver 64bit;
Source: ".\runtime-dbus\bin\*.*"; DestDir: "{app}\lib"; Flags: ignoreversion recursesubdirs; Components: dbus;
Source: ".\runtime-dbus\etc\*.*"; DestDir: "{app}\etc"; Flags: ignoreversion recursesubdirs; Components: dbus;
Source: ".\runtime-dbus\lib\libdbus-1.dll"; DestDir: "{app}\lib"; Flags: ignoreversion recursesubdirs;
Source: ".\runtime-base\*.*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs;
Source: ".\runtime-gtk\*.*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs;
; Components: gtk;
Source: ".\runtime-wimp\*.*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs;
; Components: gtk;
Source: "..\..\..\common\share\images\*.png"; DestDir: "{app}\share\images\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\common\share\sounds\default\*.wav"; DestDir: "{app}\share\sounds\default\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\common\share\sounds\default\soundtheme"; DestDir: "{app}\share\sounds\default\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\common\share\sounds\subtle\*.wav"; DestDir: "{app}\share\sounds\subtle\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\common\share\sounds\subtle\soundtheme"; DestDir: "{app}\share\sounds\subtle\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\plugin\exercises\common\share\*.png"; DestDir: "{app}\share\exercises\"; Flags: ignoreversion recursesubdirs
Source: "..\..\..\plugin\exercises\common\share\exercises.xml"; DestDir: "{app}\share\exercises\"; Flags: ignoreversion
Source: "..\..\..\..\COPYING.txt"; DestDir: "{app}"; DestName: "COPYING.txt"; Flags: ignoreversion;
Source: "..\..\..\..\AUTHORS.txt"; DestDir: "{app}"; DestName: "AUTHORS.txt"; Flags: ignoreversion;
Source: "..\..\..\..\NEWS.txt"; DestDir: "{app}"; DestName: "NEWS.txt"; Flags: ignoreversion;
Source: "..\..\..\..\README.txt"; DestDir: "{app}"; DestName: "README.txt"; Flags: ignoreversion;
Source: "..\..\src\workrave.exe"; DestDir: "{app}\lib"; DestName: "Workrave.exe"; Flags: ignoreversion;
Source: "src\.libs\libzapper-0.dll"; DestDir: "{app}"; Flags: dontcopy
#include "lang.iss"


[Registry]
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Workrave.exe"; ValueType: string; ValueData: "{app}\lib\Workrave.exe"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Workrave.exe"; ValueName: "Path"; ValueType: string; ValueData: "{code:GetAppPath}"; Flags: uninsdeletekeyifempty
Root: HKLM; Subkey: "SOFTWARE\Workrave"; ValueName: "CommonGTK"; ValueType: string; ValueData: "{code:GetCommonGtkKey}";
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueType: string; ValueName: "Workrave"; ValueData: "{app}\lib\Workrave.exe"; Flags: uninsdeletevalue; Tasks: startupmenu


[Icons]
Name: "{group}\Workrave"; Filename: "{app}\lib\Workrave.exe"
Name: "{group}\News"; Filename: "{app}\NEWS.txt"
Name: "{group}\Read me"; Filename: "{app}\README.txt"
Name: "{group}\License"; Filename: "{app}\COPYING.txt"
Name: "{group}\Uninstall"; Filename: "{uninstallexe}"
Name: "{userdesktop}\Workrave"; Filename: "{app}\lib\Workrave.exe"; MinVersion: 4,4; Tasks: desktopicon
Name: "{app}\Workrave"; Filename: "{app}\lib\Workrave.exe"

[Run]
Filename: "{app}\lib\Workrave.exe"; Description: "Launch Workrave"; Flags: nowait postinstall skipifsilent shellexec;

[InstallDelete]
Type: files; Name: "{userstartup}\Workrave.lnk"
Type: files; Name: "{app}\share\sounds\*.wav"

[Code]

function FindWorkrave(): Boolean;
external 'FindWorkrave@{tmp}\libzapper-0.dll stdcall delayload';

function ZapWorkrave(): Boolean;
external 'ZapWorkrave@{tmp}\libzapper-0.dll stdcall delayload';

function KillProcess(name : String): Boolean;
external 'KillProcess@{tmp}\libzapper-0.dll stdcall delayload';

Function EnsureWorkraveIsNotRunning() : Boolean;
var retVal : Boolean;
begin
  Result := True;
  try
    retVal := FindWorkrave;
    if retVal then
    begin
      if MsgBox('Workrave is still running. Setup must close Workrave before continuing. Please click OK to continue, or Cancel to exit',
                mbConfirmation, MB_OKCANCEL) = IDOK then
      begin
        retVal := ZapWorkrave();
	if retVal then
	begin
	  retVal := FindWorkrave();
	  if retVal then
	  begin
	    KillProcess('workrave.exe')
	    retVal := FindWorkrave();
	  end
	  if retVal then
	  begin
 	    MsgBox('Failed to close Workrave. Please close Workrave manually.', mbError, MB_OK);
	    Result := False;
          end
	end
	KillProcess('dbus-daemon.exe')
      end
      else
      begin
         Result := False;
      end
    end
  except
  end;
end;

Function InitializeSetup() : Boolean;
begin
    ExtractTemporaryFile('libzapper-0.dll');
    Result := EnsureWorkraveIsNotRunning();
end;

Function InitializeUninstall() : Boolean;
begin
    FileCopy(ExpandConstant('{app}\libzapper-0.dll'), ExpandConstant('{tmp}\libzapper-0.dll'), False);
    Result := EnsureWorkraveIsNotRunning();
end;

function HasGtkRuntime(): Boolean;
var
  v: String;
begin
  Result := RegQueryStringValue(HKLM, 'Software\GTK\2.0', 'Version', v);
end;

function GetGtkRuntimePath(): String;
var
  b: Boolean;
begin
  b := RegQueryStringValue(HKLM, 'Software\GTK\2.0', 'Path', Result);
  if not b then begin
    Result := '';
  end
end;

function IsGtkRuntimeToBeInstalled(): Boolean;
var
  i: Integer;
begin
    i := Pos(',gtk', WizardSelectedComponents(False));
    Result := i <> 0;
end;

function GetCommonGtkKey(S: String): String;
begin
    Result := 'TRUE';
    if (isGtkRuntimeToBeInstalled()) then begin
        Result := 'FALSE';
    end
end;

function GetAppPath(S: String): String;
begin
  Result := WizardDirValue + '\lib';
  if (not IsGtkRuntimeToBeInstalled()) then begin
    Result := Result + ';' + GetGtkRuntimePath() + '\lib';    
  end
end;

[Code]
function IsX64: Boolean;
begin
  Result := (ProcessorArchitecture = paX64);
end;
