// ByteStream.icc
//
// Copyright (C) 2002, 2003, 2007 Rob Caelers <robc@krandor.nl>
// All rights reserved.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//

//! Return the number of bytes free.
inline int
ByteStream::get_available() const
{
  return size - (data_ptr - data_start);
}


//! Return the current read/write offset
inline int
ByteStream::get_offset() const
{
  return (data_ptr - data_start);
}


//! Return the current read/write pointer
inline guint8 *
ByteStream::get_data_ptr() const
{
  return data_ptr;
}


//! Return the beginning of the bytestream buffer
inline guint8 *
ByteStream::get_data() const
{
  return data_start;
}


//! Return the data in the buffer and become transfer ownership
inline guint8 *
ByteStream::take_data()
{
  guint8 *ret = data_start;

  data_start = NULL;
  data_ptr = NULL;
  size = 0;

  return ret;
}

//! Return the size of the bytestream buffer
inline int
ByteStream::get_size() const
{
  return size;
}


//! Rewind the read/writer pointer to the start of the buffer
inline void
ByteStream::rewind()
{
  data_ptr = data_start;
}


//! Advance the read/write pointer the specified amount of bytes
inline void
ByteStream::advance(int delta)
{
  if ((data_ptr - data_start) + delta > size)
    {
      throw ByteStreamException("advancing beyond end");
    }

  data_ptr += delta;
}
