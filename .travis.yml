sudo: required
dist: trusty

services:
  - docker

notifications:
  email:
    on_success: change
    on_failure: change

################################################################################

stage_generic: &stage_generic
  before_install:
    |
    if [ ${TRAVIS_OS_NAME} = "linux" ]; then
      pushd /tmp
      curl -OL https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2
      tar xvfj linux-amd64-github-release.tar.bz2
      mkdir -p ~/bin/
      mv bin/linux/amd64/github-release ~/bin/
      chmod +x ~/bin/github-release
      popd
    fi
  before_deploy:
    - GIT_TAG=`git describe --tags --abbrev=10`
    - BUILD_DATE=`date +"%Y%m%d"`

stage_generic_build: &stage_generic_build
  <<: *stage_generic
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          $(printenv | grep -E '^(COMPILER|WITH_UI|CONF_ENABLE|CONF_DISABLE|DOCKER_IMAGE|TRAVIS_BUILD_DIR)=' | sed 's/^/-e /g') \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/build.sh"
    else
       build/travis/build.sh
    fi

stage_linux: &stage_linux
  <<: *stage_generic_build
  os: linux
  dist: trusty
  language: cpp

stage_ppa: &stage_ppa
  <<: *stage_generic
  os: linux
  dist: trusty
  language: cpp
  script: |
    if [[ $DOCKER_IMAGE ]]; then
      docker run --rm \
          -v "$TRAVIS_BUILD_DIR:/workspace/source" \
          rcaelers/workrave-build:${DOCKER_IMAGE} \
          sh -c "/workspace/source/build/travis/ppa.sh"
    else
       build/travis/ppa.sh
    fi
    
stage_win32: &stage_win32
  <<: *stage_linux
  deploy:
#    - provider: releases
#      api_key: $GITHUB_TOKEN
#      skip_cleanup: true
#      file_glob: true
#      file: _deploy/*.exe
#      draft: true
#      on:
#        repo: rcaelers/workrave
#        branch: master
#        tags: true
#
#    - provider: script
#      skip_cleanup: true
#      on:
#        repo: rcaelers/workrave
#        branch: master
#        tags: true
#      script: build/travis/deploy-upload.sh

    - provider: s3
      skip_cleanup: yes
      local_dir: _deploy
      upload_dir: "snapshots/master/$BUILD_DATE-$GIT_TAG"
      acl: public_read
      bucket: org-workrave
      access_key_id: "$AWS_ACCESS_KEY_ID"
      secret_access_key: "$AWS_SECRET_ACCESS_KEY"
      region: eu-central-1
      on:
        repo: rcaelers/workrave
        branch: master
  
    - provider: s3
      skip_cleanup: yes
      local_dir: _deploy
      upload_dir: "snapshots/master/$BUILD_DATE-$GIT_TAG"
      acl: public_read
      bucket: org-workrave
      access_key_id: "$AWS_ACCESS_KEY_ID"
      secret_access_key: "$AWS_SECRET_ACCESS_KEY"
      region: eu-central-1
      on:
        repo: rcaelers/workrave
        tags: true

stage_osx: &stage_osx
  <<: *stage_generic_build
  os: osx
  osx_image: xcode9.4
  language: cpp
  before_install:
    |
    if [ ${TRAVIS_OS_NAME} = "osx" ]; then
      # compilation with system wide gettext fails at the link stage with missing symbols...
      brew install gettext qt5 python3
      brew link gettext --force
      brew linkapps qt5
      brew outdated cmake || brew upgrade cmake
      
      pip3 install --user Jinja2==2.8 # required for dbus support, system (distro) wide include paths are ignored
    fi

jobs:
  include:
#    - stage: prepare
#      script: |
#        github-release release \
#          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
#          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
#          --tag "$TRAVIS_TAG" \
#          --name "Workrave $TRAVIS_TAG" \
#          --description "New release" \
#          --draft
#      <<: *stage_generic

    ###########################################################################
    - stage: build
      env: >
        COMPILER="gcc"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE"
        CONF_DISABLE="GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="ubuntu-xenial"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE"
        CONF_DISABLE="GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="ubuntu-artful"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE"
        CONF_DISABLE="GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="ubuntu-bionic-plus"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="clang"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE"
        CONF_DISABLE="GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="ubuntu-bionic-plus"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="clang"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE,TRACING"
        CONF_DISABLE="GCONF,TESTS,COVERAGE"
        DOCKER_IMAGE="ubuntu-bionic-plus"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="clang"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE,TRACING"
        CONF_DISABLE="GCONF,TESTS,COVERAGE"
        DOCKER_IMAGE="ubuntu-bionic-plus"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        WITH_UI="Gtk+3"
        CONF_ENABLE="INDICATOR,GNOME_CLASSIC_PANEL,GSTREAMER,PULSE"
        CONF_DISABLE="GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="ubuntu-cosmic"
      <<: *stage_linux

    - stage: build
      env: >
        COMPILER="gcc"
        WITH_UI="Gtk+3"
        CONF_ENABLE=""
        CONF_DISABLE="INDICATOR,GSTREAMER,PULSE,GNOME_CLASSIC_PANEL,GCONF,TESTS,COVERAGE,TRACING"
        DOCKER_IMAGE="mingw-gtk"
      <<: *stage_win32

    - stage: build
      compiler: clang
      env: >
        WITH_UI="Qt5"
        CONF_ENABLE=""
        CONF_DISABLE="INDICATOR,GSTREAMER,PULSE,GNOME_CLASSIC_PANEL,GCONF,TESTS,COVERAGE,TRACING"
      <<: *stage_osx

#    - stage: release
#      script:
#        - |
#          github-release edit \
#          --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
#          --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
#          --tag "$TRAVIS_TAG" \
#          --name "Workrave $TRAVIS_TAG" \
#          --description "New release"
#      <<: *stage_generic
#
#    - stage: ppa
#      env: >
#        DOCKER_IMAGE="ubuntu-bionic"
#      before_install:
#        - openssl aes-256-cbc -K $encrypted_ad072dc8e07b_key -iv $encrypted_ad072dc8e07b_iv -in build/travis/secring.gpg.enc -out build/travis/secring.gpg -d
#        - chmod 0600 build/travis/secring.gpg
#      <<: *stage_ppa

#after_failure:
#  - |
#    github-release delete \
#    --user "${TRAVIS_REPO_SLUG%%/[^/]*}" \
#    --repo "${TRAVIS_REPO_SLUG#[^/]*/}" \
#    --tag "$TRAVIS_TAG"

stages:
#    - name: prepare
#      if: tag IS present AND type = push
    - name: build
#    - name: release
#      if: tag IS present AND type = push
#    - name: ppa
#      if: type = push

# condition: "$TRAVIS_TAG =~ ^v1.*$"
#  --description "$(cat /tmp/release-note)"
